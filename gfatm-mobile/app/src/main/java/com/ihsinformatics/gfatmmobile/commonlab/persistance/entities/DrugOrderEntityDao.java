package com.ihsinformatics.gfatmmobile.commonlab.persistance.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "drug_order".
*/
public class DrugOrderEntityDao extends AbstractDao<DrugOrderEntity, Long> {

    public static final String TABLENAME = "drug_order";

    /**
     * Properties of entity DrugOrderEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uuid = new Property(1, String.class, "uuid", false, "UUID");
        public final static Property PatientUUID = new Property(2, String.class, "patientUUID", false, "PATIENT_UUID");
        public final static Property OrderNumber = new Property(3, String.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property Action = new Property(4, String.class, "action", false, "ACTION");
        public final static Property CareSettingUUID = new Property(5, String.class, "careSettingUUID", false, "CARE_SETTING_UUID");
        public final static Property PreviousOrderUUID = new Property(6, String.class, "previousOrderUUID", false, "PREVIOUS_ORDER_UUID");
        public final static Property DateActivated = new Property(7, String.class, "dateActivated", false, "DATE_ACTIVATED");
        public final static Property DateStopped = new Property(8, String.class, "dateStopped", false, "DATE_STOPPED");
        public final static Property AutoExpireDate = new Property(9, String.class, "autoExpireDate", false, "AUTO_EXPIRE_DATE");
        public final static Property EncounterUUID = new Property(10, String.class, "encounterUUID", false, "ENCOUNTER_UUID");
        public final static Property OrdererUUID = new Property(11, String.class, "ordererUUID", false, "ORDERER_UUID");
        public final static Property OrderReasonUUID = new Property(12, String.class, "orderReasonUUID", false, "ORDER_REASON_UUID");
        public final static Property OrderReasonNonCoded = new Property(13, String.class, "orderReasonNonCoded", false, "ORDER_REASON_NON_CODED");
        public final static Property Instructions = new Property(14, String.class, "instructions", false, "INSTRUCTIONS");
        public final static Property DrugUUID = new Property(15, String.class, "drugUUID", false, "DRUG_UUID");
        public final static Property Dose = new Property(16, Double.class, "dose", false, "DOSE");
        public final static Property DoseUnitsUUID = new Property(17, String.class, "doseUnitsUUID", false, "DOSE_UNITS_UUID");
        public final static Property FrequencyUUID = new Property(18, String.class, "frequencyUUID", false, "FREQUENCY_UUID");
        public final static Property Quantity = new Property(19, Double.class, "quantity", false, "QUANTITY");
        public final static Property QuantityUnitsUUID = new Property(20, String.class, "quantityUnitsUUID", false, "QUANTITY_UNITS_UUID");
        public final static Property Duration = new Property(21, Integer.class, "duration", false, "DURATION");
        public final static Property DurationUnitsUUID = new Property(22, String.class, "durationUnitsUUID", false, "DURATION_UNITS_UUID");
        public final static Property RouteUUID = new Property(23, String.class, "routeUUID", false, "ROUTE_UUID");
    }


    public DrugOrderEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DrugOrderEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"drug_order\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UUID\" TEXT," + // 1: uuid
                "\"PATIENT_UUID\" TEXT," + // 2: patientUUID
                "\"ORDER_NUMBER\" TEXT," + // 3: orderNumber
                "\"ACTION\" TEXT," + // 4: action
                "\"CARE_SETTING_UUID\" TEXT," + // 5: careSettingUUID
                "\"PREVIOUS_ORDER_UUID\" TEXT," + // 6: previousOrderUUID
                "\"DATE_ACTIVATED\" TEXT," + // 7: dateActivated
                "\"DATE_STOPPED\" TEXT," + // 8: dateStopped
                "\"AUTO_EXPIRE_DATE\" TEXT," + // 9: autoExpireDate
                "\"ENCOUNTER_UUID\" TEXT," + // 10: encounterUUID
                "\"ORDERER_UUID\" TEXT," + // 11: ordererUUID
                "\"ORDER_REASON_UUID\" TEXT," + // 12: orderReasonUUID
                "\"ORDER_REASON_NON_CODED\" TEXT," + // 13: orderReasonNonCoded
                "\"INSTRUCTIONS\" TEXT," + // 14: instructions
                "\"DRUG_UUID\" TEXT," + // 15: drugUUID
                "\"DOSE\" REAL," + // 16: dose
                "\"DOSE_UNITS_UUID\" TEXT," + // 17: doseUnitsUUID
                "\"FREQUENCY_UUID\" TEXT," + // 18: frequencyUUID
                "\"QUANTITY\" REAL," + // 19: quantity
                "\"QUANTITY_UNITS_UUID\" TEXT," + // 20: quantityUnitsUUID
                "\"DURATION\" INTEGER," + // 21: duration
                "\"DURATION_UNITS_UUID\" TEXT," + // 22: durationUnitsUUID
                "\"ROUTE_UUID\" TEXT);"); // 23: routeUUID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"drug_order\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DrugOrderEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String patientUUID = entity.getPatientUUID();
        if (patientUUID != null) {
            stmt.bindString(3, patientUUID);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(4, orderNumber);
        }
 
        String action = entity.getAction();
        if (action != null) {
            stmt.bindString(5, action);
        }
 
        String careSettingUUID = entity.getCareSettingUUID();
        if (careSettingUUID != null) {
            stmt.bindString(6, careSettingUUID);
        }
 
        String previousOrderUUID = entity.getPreviousOrderUUID();
        if (previousOrderUUID != null) {
            stmt.bindString(7, previousOrderUUID);
        }
 
        String dateActivated = entity.getDateActivated();
        if (dateActivated != null) {
            stmt.bindString(8, dateActivated);
        }
 
        String dateStopped = entity.getDateStopped();
        if (dateStopped != null) {
            stmt.bindString(9, dateStopped);
        }
 
        String autoExpireDate = entity.getAutoExpireDate();
        if (autoExpireDate != null) {
            stmt.bindString(10, autoExpireDate);
        }
 
        String encounterUUID = entity.getEncounterUUID();
        if (encounterUUID != null) {
            stmt.bindString(11, encounterUUID);
        }
 
        String ordererUUID = entity.getOrdererUUID();
        if (ordererUUID != null) {
            stmt.bindString(12, ordererUUID);
        }
 
        String orderReasonUUID = entity.getOrderReasonUUID();
        if (orderReasonUUID != null) {
            stmt.bindString(13, orderReasonUUID);
        }
 
        String orderReasonNonCoded = entity.getOrderReasonNonCoded();
        if (orderReasonNonCoded != null) {
            stmt.bindString(14, orderReasonNonCoded);
        }
 
        String instructions = entity.getInstructions();
        if (instructions != null) {
            stmt.bindString(15, instructions);
        }
 
        String drugUUID = entity.getDrugUUID();
        if (drugUUID != null) {
            stmt.bindString(16, drugUUID);
        }
 
        Double dose = entity.getDose();
        if (dose != null) {
            stmt.bindDouble(17, dose);
        }
 
        String doseUnitsUUID = entity.getDoseUnitsUUID();
        if (doseUnitsUUID != null) {
            stmt.bindString(18, doseUnitsUUID);
        }
 
        String frequencyUUID = entity.getFrequencyUUID();
        if (frequencyUUID != null) {
            stmt.bindString(19, frequencyUUID);
        }
 
        Double quantity = entity.getQuantity();
        if (quantity != null) {
            stmt.bindDouble(20, quantity);
        }
 
        String quantityUnitsUUID = entity.getQuantityUnitsUUID();
        if (quantityUnitsUUID != null) {
            stmt.bindString(21, quantityUnitsUUID);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(22, duration);
        }
 
        String durationUnitsUUID = entity.getDurationUnitsUUID();
        if (durationUnitsUUID != null) {
            stmt.bindString(23, durationUnitsUUID);
        }
 
        String routeUUID = entity.getRouteUUID();
        if (routeUUID != null) {
            stmt.bindString(24, routeUUID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DrugOrderEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String patientUUID = entity.getPatientUUID();
        if (patientUUID != null) {
            stmt.bindString(3, patientUUID);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(4, orderNumber);
        }
 
        String action = entity.getAction();
        if (action != null) {
            stmt.bindString(5, action);
        }
 
        String careSettingUUID = entity.getCareSettingUUID();
        if (careSettingUUID != null) {
            stmt.bindString(6, careSettingUUID);
        }
 
        String previousOrderUUID = entity.getPreviousOrderUUID();
        if (previousOrderUUID != null) {
            stmt.bindString(7, previousOrderUUID);
        }
 
        String dateActivated = entity.getDateActivated();
        if (dateActivated != null) {
            stmt.bindString(8, dateActivated);
        }
 
        String dateStopped = entity.getDateStopped();
        if (dateStopped != null) {
            stmt.bindString(9, dateStopped);
        }
 
        String autoExpireDate = entity.getAutoExpireDate();
        if (autoExpireDate != null) {
            stmt.bindString(10, autoExpireDate);
        }
 
        String encounterUUID = entity.getEncounterUUID();
        if (encounterUUID != null) {
            stmt.bindString(11, encounterUUID);
        }
 
        String ordererUUID = entity.getOrdererUUID();
        if (ordererUUID != null) {
            stmt.bindString(12, ordererUUID);
        }
 
        String orderReasonUUID = entity.getOrderReasonUUID();
        if (orderReasonUUID != null) {
            stmt.bindString(13, orderReasonUUID);
        }
 
        String orderReasonNonCoded = entity.getOrderReasonNonCoded();
        if (orderReasonNonCoded != null) {
            stmt.bindString(14, orderReasonNonCoded);
        }
 
        String instructions = entity.getInstructions();
        if (instructions != null) {
            stmt.bindString(15, instructions);
        }
 
        String drugUUID = entity.getDrugUUID();
        if (drugUUID != null) {
            stmt.bindString(16, drugUUID);
        }
 
        Double dose = entity.getDose();
        if (dose != null) {
            stmt.bindDouble(17, dose);
        }
 
        String doseUnitsUUID = entity.getDoseUnitsUUID();
        if (doseUnitsUUID != null) {
            stmt.bindString(18, doseUnitsUUID);
        }
 
        String frequencyUUID = entity.getFrequencyUUID();
        if (frequencyUUID != null) {
            stmt.bindString(19, frequencyUUID);
        }
 
        Double quantity = entity.getQuantity();
        if (quantity != null) {
            stmt.bindDouble(20, quantity);
        }
 
        String quantityUnitsUUID = entity.getQuantityUnitsUUID();
        if (quantityUnitsUUID != null) {
            stmt.bindString(21, quantityUnitsUUID);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(22, duration);
        }
 
        String durationUnitsUUID = entity.getDurationUnitsUUID();
        if (durationUnitsUUID != null) {
            stmt.bindString(23, durationUnitsUUID);
        }
 
        String routeUUID = entity.getRouteUUID();
        if (routeUUID != null) {
            stmt.bindString(24, routeUUID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DrugOrderEntity readEntity(Cursor cursor, int offset) {
        DrugOrderEntity entity = new DrugOrderEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uuid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // patientUUID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // orderNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // action
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // careSettingUUID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // previousOrderUUID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // dateActivated
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // dateStopped
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // autoExpireDate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // encounterUUID
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ordererUUID
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // orderReasonUUID
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // orderReasonNonCoded
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // instructions
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // drugUUID
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // dose
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // doseUnitsUUID
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // frequencyUUID
            cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19), // quantity
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // quantityUnitsUUID
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // duration
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // durationUnitsUUID
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23) // routeUUID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DrugOrderEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPatientUUID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrderNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAction(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCareSettingUUID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPreviousOrderUUID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDateActivated(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDateStopped(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAutoExpireDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEncounterUUID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOrdererUUID(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOrderReasonUUID(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setOrderReasonNonCoded(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setInstructions(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDrugUUID(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDose(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setDoseUnitsUUID(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setFrequencyUUID(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setQuantity(cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19));
        entity.setQuantityUnitsUUID(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setDuration(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setDurationUnitsUUID(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setRouteUUID(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DrugOrderEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DrugOrderEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DrugOrderEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

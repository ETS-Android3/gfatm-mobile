package com.ihsinformatics.gfatmmobile.commonlab.persistance.entities;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "test_order".
*/
public class TestOrderEntityDao extends AbstractDao<TestOrderEntity, Long> {

    public static final String TABLENAME = "test_order";

    /**
     * Properties of entity TestOrderEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uuid = new Property(1, String.class, "uuid", false, "UUID");
        public final static Property OrderNumber = new Property(2, String.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property Display = new Property(3, String.class, "display", false, "DISPLAY");
        public final static Property Order = new Property(4, String.class, "order", false, "ORDER");
        public final static Property PatientUUID = new Property(5, String.class, "patientUUID", false, "PATIENT_UUID");
        public final static Property EncounterUUID = new Property(6, String.class, "EncounterUUID", false, "ENCOUNTER_UUID");
        public final static Property ConceptUUID = new Property(7, String.class, "conceptUUID", false, "CONCEPT_UUID");
        public final static Property OrdererUUID = new Property(8, String.class, "ordererUUID", false, "ORDERER_UUID");
        public final static Property CaresettingUUID = new Property(9, String.class, "caresettingUUID", false, "CARESETTING_UUID");
        public final static Property Creator = new Property(10, String.class, "creator", false, "CREATOR");
        public final static Property DateCreated = new Property(11, String.class, "dateCreated", false, "DATE_CREATED");
        public final static Property TestTypeId = new Property(12, Long.class, "testTypeId", false, "TEST_TYPE_ID");
        public final static Property LabReferenceNumber = new Property(13, String.class, "labReferenceNumber", false, "LAB_REFERENCE_NUMBER");
    }

    private DaoSession daoSession;


    public TestOrderEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TestOrderEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"test_order\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UUID\" TEXT UNIQUE ," + // 1: uuid
                "\"ORDER_NUMBER\" TEXT," + // 2: orderNumber
                "\"DISPLAY\" TEXT," + // 3: display
                "\"ORDER\" TEXT," + // 4: order
                "\"PATIENT_UUID\" TEXT," + // 5: patientUUID
                "\"ENCOUNTER_UUID\" TEXT," + // 6: EncounterUUID
                "\"CONCEPT_UUID\" TEXT," + // 7: conceptUUID
                "\"ORDERER_UUID\" TEXT," + // 8: ordererUUID
                "\"CARESETTING_UUID\" TEXT," + // 9: caresettingUUID
                "\"CREATOR\" TEXT," + // 10: creator
                "\"DATE_CREATED\" TEXT," + // 11: dateCreated
                "\"TEST_TYPE_ID\" INTEGER," + // 12: testTypeId
                "\"LAB_REFERENCE_NUMBER\" TEXT);"); // 13: labReferenceNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"test_order\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TestOrderEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(3, orderNumber);
        }
 
        String display = entity.getDisplay();
        if (display != null) {
            stmt.bindString(4, display);
        }
 
        String order = entity.getOrder();
        if (order != null) {
            stmt.bindString(5, order);
        }
 
        String patientUUID = entity.getPatientUUID();
        if (patientUUID != null) {
            stmt.bindString(6, patientUUID);
        }
 
        String EncounterUUID = entity.getEncounterUUID();
        if (EncounterUUID != null) {
            stmt.bindString(7, EncounterUUID);
        }
 
        String conceptUUID = entity.getConceptUUID();
        if (conceptUUID != null) {
            stmt.bindString(8, conceptUUID);
        }
 
        String ordererUUID = entity.getOrdererUUID();
        if (ordererUUID != null) {
            stmt.bindString(9, ordererUUID);
        }
 
        String caresettingUUID = entity.getCaresettingUUID();
        if (caresettingUUID != null) {
            stmt.bindString(10, caresettingUUID);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(11, creator);
        }
 
        String dateCreated = entity.getDateCreated();
        if (dateCreated != null) {
            stmt.bindString(12, dateCreated);
        }
 
        Long testTypeId = entity.getTestTypeId();
        if (testTypeId != null) {
            stmt.bindLong(13, testTypeId);
        }
 
        String labReferenceNumber = entity.getLabReferenceNumber();
        if (labReferenceNumber != null) {
            stmt.bindString(14, labReferenceNumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TestOrderEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(3, orderNumber);
        }
 
        String display = entity.getDisplay();
        if (display != null) {
            stmt.bindString(4, display);
        }
 
        String order = entity.getOrder();
        if (order != null) {
            stmt.bindString(5, order);
        }
 
        String patientUUID = entity.getPatientUUID();
        if (patientUUID != null) {
            stmt.bindString(6, patientUUID);
        }
 
        String EncounterUUID = entity.getEncounterUUID();
        if (EncounterUUID != null) {
            stmt.bindString(7, EncounterUUID);
        }
 
        String conceptUUID = entity.getConceptUUID();
        if (conceptUUID != null) {
            stmt.bindString(8, conceptUUID);
        }
 
        String ordererUUID = entity.getOrdererUUID();
        if (ordererUUID != null) {
            stmt.bindString(9, ordererUUID);
        }
 
        String caresettingUUID = entity.getCaresettingUUID();
        if (caresettingUUID != null) {
            stmt.bindString(10, caresettingUUID);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(11, creator);
        }
 
        String dateCreated = entity.getDateCreated();
        if (dateCreated != null) {
            stmt.bindString(12, dateCreated);
        }
 
        Long testTypeId = entity.getTestTypeId();
        if (testTypeId != null) {
            stmt.bindLong(13, testTypeId);
        }
 
        String labReferenceNumber = entity.getLabReferenceNumber();
        if (labReferenceNumber != null) {
            stmt.bindString(14, labReferenceNumber);
        }
    }

    @Override
    protected final void attachEntity(TestOrderEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TestOrderEntity readEntity(Cursor cursor, int offset) {
        TestOrderEntity entity = new TestOrderEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uuid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orderNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // display
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // order
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // patientUUID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // EncounterUUID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // conceptUUID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ordererUUID
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // caresettingUUID
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // creator
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // dateCreated
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // testTypeId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // labReferenceNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TestOrderEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrderNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDisplay(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrder(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPatientUUID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEncounterUUID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setConceptUUID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOrdererUUID(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCaresettingUUID(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreator(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDateCreated(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTestTypeId(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setLabReferenceNumber(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TestOrderEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TestOrderEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TestOrderEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTestTypeEntityDao().getAllColumns());
            builder.append(" FROM test_order T");
            builder.append(" LEFT JOIN test_type T0 ON T.\"TEST_TYPE_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected TestOrderEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        TestOrderEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        TestTypeEntity labTestType = loadCurrentOther(daoSession.getTestTypeEntityDao(), cursor, offset);
        entity.setLabTestType(labTestType);

        return entity;    
    }

    public TestOrderEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<TestOrderEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<TestOrderEntity> list = new ArrayList<TestOrderEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<TestOrderEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<TestOrderEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

package com.ihsinformatics.gfatmmobile.commonlab.persistance.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "medication_drug".
*/
public class MedicationDrugDao extends AbstractDao<MedicationDrug, Void> {

    public static final String TABLENAME = "medication_drug";

    /**
     * Properties of entity MedicationDrug.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uuid = new Property(0, String.class, "uuid", false, "UUID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property MaximumDailyDose = new Property(2, Double.class, "maximumDailyDose", false, "MAXIMUM_DAILY_DOSE");
        public final static Property MinimumDailyDose = new Property(3, Double.class, "minimumDailyDose", false, "MINIMUM_DAILY_DOSE");
        public final static Property Strength = new Property(4, String.class, "strength", false, "STRENGTH");
        public final static Property ConceptUUID = new Property(5, String.class, "conceptUUID", false, "CONCEPT_UUID");
        public final static Property ConceptName = new Property(6, String.class, "conceptName", false, "CONCEPT_NAME");
    }


    public MedicationDrugDao(DaoConfig config) {
        super(config);
    }
    
    public MedicationDrugDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"medication_drug\" (" + //
                "\"UUID\" TEXT," + // 0: uuid
                "\"NAME\" TEXT," + // 1: name
                "\"MAXIMUM_DAILY_DOSE\" REAL," + // 2: maximumDailyDose
                "\"MINIMUM_DAILY_DOSE\" REAL," + // 3: minimumDailyDose
                "\"STRENGTH\" TEXT," + // 4: strength
                "\"CONCEPT_UUID\" TEXT," + // 5: conceptUUID
                "\"CONCEPT_NAME\" TEXT);"); // 6: conceptName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"medication_drug\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MedicationDrug entity) {
        stmt.clearBindings();
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(1, uuid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Double maximumDailyDose = entity.getMaximumDailyDose();
        if (maximumDailyDose != null) {
            stmt.bindDouble(3, maximumDailyDose);
        }
 
        Double minimumDailyDose = entity.getMinimumDailyDose();
        if (minimumDailyDose != null) {
            stmt.bindDouble(4, minimumDailyDose);
        }
 
        String strength = entity.getStrength();
        if (strength != null) {
            stmt.bindString(5, strength);
        }
 
        String conceptUUID = entity.getConceptUUID();
        if (conceptUUID != null) {
            stmt.bindString(6, conceptUUID);
        }
 
        String conceptName = entity.getConceptName();
        if (conceptName != null) {
            stmt.bindString(7, conceptName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MedicationDrug entity) {
        stmt.clearBindings();
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(1, uuid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Double maximumDailyDose = entity.getMaximumDailyDose();
        if (maximumDailyDose != null) {
            stmt.bindDouble(3, maximumDailyDose);
        }
 
        Double minimumDailyDose = entity.getMinimumDailyDose();
        if (minimumDailyDose != null) {
            stmt.bindDouble(4, minimumDailyDose);
        }
 
        String strength = entity.getStrength();
        if (strength != null) {
            stmt.bindString(5, strength);
        }
 
        String conceptUUID = entity.getConceptUUID();
        if (conceptUUID != null) {
            stmt.bindString(6, conceptUUID);
        }
 
        String conceptName = entity.getConceptName();
        if (conceptName != null) {
            stmt.bindString(7, conceptName);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MedicationDrug readEntity(Cursor cursor, int offset) {
        MedicationDrug entity = new MedicationDrug( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uuid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // maximumDailyDose
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // minimumDailyDose
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // strength
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // conceptUUID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // conceptName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MedicationDrug entity, int offset) {
        entity.setUuid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMaximumDailyDose(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setMinimumDailyDose(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setStrength(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setConceptUUID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setConceptName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MedicationDrug entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MedicationDrug entity) {
        return null;
    }

    @Override
    public boolean hasKey(MedicationDrug entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
